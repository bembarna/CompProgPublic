// <auto-generated />
using System;
using CompProgEdu.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompProgEdu.Core.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201116001746_Start4")]
    partial class Start4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-preview.7.20365.15");

            modelBuilder.Entity("CompProgEdu.Core.Features.Assignments.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AllowedLanguages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignmentInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignmentSolutionFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExampleInput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExampleOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPointValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VisibilityDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignments","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Courses.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.CurlySets.ClassSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessModifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullClassSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAbstract")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ClassSignatures","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.CurlySets.CurlySet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassSignatureId")
                        .HasColumnType("int");

                    b.Property<int>("CloseCurlyPositionInString")
                        .HasColumnType("int");

                    b.Property<int?>("ClosedCurlyId")
                        .HasColumnType("int");

                    b.Property<bool>("HasReturn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClass")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMethod")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimitiveStatement")
                        .HasColumnType("bit");

                    b.Property<int?>("MethodSignatureId")
                        .HasColumnType("int");

                    b.Property<int>("OpenCurlyId")
                        .HasColumnType("int");

                    b.Property<int>("OpenCurlyPositionInString")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertySignatureId")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnStatementId")
                        .HasColumnType("int");

                    b.Property<int?>("StatementSignatureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassSignatureId");

                    b.HasIndex("MethodSignatureId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ReturnStatementId");

                    b.HasIndex("StatementSignatureId");

                    b.ToTable("CurlySets","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.CurlySets.MethodSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessModifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("FullMethodSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAsync")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReference")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVoid")
                        .HasColumnType("bit");

                    b.Property<string>("MethodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MethodSignatures","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.CurlySets.PrimitiveStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Statement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatementSignature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PrimitiveStatements","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.CurlySets.PrimitiveVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("CurlySetId")
                        .HasColumnType("int");

                    b.Property<string>("VariableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VariableSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VariableType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VariableValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurlySetId");

                    b.ToTable("PrimitiveVariables","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.CurlySets.PropertySignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessModifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("CurlySetId")
                        .HasColumnType("int");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyFunction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyHead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurlySetId");

                    b.ToTable("PropertySignatures","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.CurlySets.ReturnStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ReturnEndIndex")
                        .HasColumnType("int");

                    b.Property<string>("ReturnSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReturnStartIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ReturnStatements","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.DesiredOutputs.DesiredOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("DesiredOutputs","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Instructors.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Students.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ChangedPassword")
                        .HasColumnType("bit");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<string>("StudentSchoolNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Students.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Submissions.InstructorSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("CurlySetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("CurlySetId");

                    b.ToTable("InstructorSubmissions","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.TestEntities.TestAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TestAccounts","domain");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Assignments.Assignment", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Courses.Course", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Instructors.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.CurlySets.CurlySet", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.CurlySets.ClassSignature", "ClassSignature")
                        .WithMany()
                        .HasForeignKey("ClassSignatureId");

                    b.HasOne("CompProgEdu.Core.Features.CurlySets.MethodSignature", "MethodSignature")
                        .WithMany()
                        .HasForeignKey("MethodSignatureId");

                    b.HasOne("CompProgEdu.Core.Features.CurlySets.CurlySet", "ParentCurlySet")
                        .WithMany("CurlySets")
                        .HasForeignKey("ParentId");

                    b.HasOne("CompProgEdu.Core.Features.CurlySets.ReturnStatement", "ReturnStatement")
                        .WithMany()
                        .HasForeignKey("ReturnStatementId");

                    b.HasOne("CompProgEdu.Core.Features.CurlySets.PrimitiveStatement", "StatementSignature")
                        .WithMany()
                        .HasForeignKey("StatementSignatureId");
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.CurlySets.MethodSignature", b =>
                {
                    b.OwnsMany("CompProgEdu.Core.Features.CurlySets.MethodParameter", "MethodParameters", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<int>("MethodParameterId")
                                .HasColumnType("int");

                            b1.Property<string>("ParameterName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ParameterType")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("MethodParameterId");

                            b1.ToTable("MethodParameter");

                            b1.WithOwner()
                                .HasForeignKey("MethodParameterId");
                        });
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.CurlySets.PrimitiveVariable", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.CurlySets.CurlySet", "CurlySet")
                        .WithMany("PrimitiveVariables")
                        .HasForeignKey("CurlySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.CurlySets.PropertySignature", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.CurlySets.CurlySet", "CurlySet")
                        .WithMany("PropertySignatures")
                        .HasForeignKey("CurlySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.DesiredOutputs.DesiredOutput", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Assignments.Assignment", "Assignment")
                        .WithMany("DesiredOutputs")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Instructors.Instructor", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Students.Student", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Students.StudentCourse", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Courses.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompProgEdu.Core.Features.Students.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Submissions.InstructorSubmission", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Assignments.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompProgEdu.Core.Features.CurlySets.CurlySet", "CurlySet")
                        .WithMany()
                        .HasForeignKey("CurlySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.RoleClaim", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Users.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.UserClaim", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Users.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.UserLogin", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Users.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.UserRole", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Users.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompProgEdu.Core.Features.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompProgEdu.Core.Features.Users.UserToken", b =>
                {
                    b.HasOne("CompProgEdu.Core.Features.Users.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
